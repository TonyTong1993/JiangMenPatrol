
package com.zzz.ecity.android.applibrary.service;

import android.annotation.SuppressLint;
import android.app.Notification;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.location.Location;
import android.location.LocationManager;
import android.os.Build.VERSION;
import android.os.Bundle;
import android.os.IBinder;
import android.os.PowerManager;
import android.text.TextUtils;
import android.util.Log;

import com.ecity.mobile.android.library.gpsengine.GPSEngine;
import com.ecity.mobile.android.library.gpsengine.ILocationChangedListener;
import com.z3app.android.util.DateUtil;
import com.z3app.android.util.FileUtil;
import com.z3app.android.util.StringUtil;
import com.zzz.ecity.android.applibrary.MyApplication;
import com.zzz.ecity.android.applibrary.database.GPSPositionDao;
import com.zzz.ecity.android.applibrary.model.EPositionMessageType;
import com.zzz.ecity.android.applibrary.model.GPSPositionBean;
import com.zzz.ecity.android.applibrary.model.PositionConfig;
import com.zzz.ecity.android.applibrary.task.GPSPositionReporter;
import com.zzz.ecity.android.applibrary.task.PositionReportTask;
import com.zzz.ecity.android.applibrary.utils.ListUtil;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

/***
 * 坐标服务，用于启动GPS定位，GPS轨迹上报
 * 启动该Service之前 必须先配置好PositionConfig类，包括上报路径、坐标构建器
 * @author ZiZhengzhuan
 *
 */
public class PositionService extends Service {
    private int NOTIFICATION_ID_APP_IS_RUNNING = 0x999;
	private static boolean pauseReport = false;
	private static Location lastLocation;
    private ScheduledExecutorService backgroundService = null;
    public static boolean isStop = false;
	private static PowerManager pm;  
	private static PowerManager.WakeLock wakeLock;
    @Override
    public IBinder onBind(Intent intent) {
    	return null;
    }
    /***
     * 最近一个坐标点
     * @return
     */
	public static Location getLastLocation() {
		return lastLocation;
	}
	/**
	 * 是否暂停上报
	 * @return
	 */
	public static boolean isPauseReport() {
		return pauseReport;
	}
	
	public static void setPauseReport(boolean pauseReport) {
		PositionService.pauseReport = pauseReport;
	}
	
	private void report() {
        if (isStop) {
            if (backgroundService != null){
                backgroundService.shutdown();
            }
            backgroundService = null;
            stopSelf();
            return;

        }
        reportPosition();
    }
    
    private void reportPosition(){
    	
    	if(GPSPositionReporter.getInstance().isTaskRuning()){
    		return;
    	}
    	
        List<GPSPositionBean> reportBeanList = getNoReportedGPSPosition();
        if(ListUtil.isEmpty(reportBeanList)) {
            GPSPositionReporter.getInstance().updatePatrolMenState();
        }
        GPSPositionReporter.getInstance().reportPositions(reportBeanList);
    }
    
    private List<GPSPositionBean> getNoReportedGPSPosition() {
    	if(!StringUtil.isBlank(PositionConfig.getReportUserId())){
    		return  GPSPositionDao.getInstance().getPositionBeans(PositionConfig.getReportUserId(),7,0,1,50,0);
    	}
    	
    	return null;
    }
    
    @Override
    public int onStartCommand(Intent intent, int flags, int startId){
        startForegroundService();
        if(!StringUtil.isBlank(PositionConfig.getReportPositionBeanBuilderClassName())){
    		PositionReportTask.getInstance().initReportPositionBeanBuilder(PositionConfig.getReportPositionBeanBuilderClassName());
    	} else {
    		sendPositionBroadcast(EPositionMessageType.POSITIONBEANBUILDERNOTFOUND,"must setup PositionBeanBuilder first");
    	}
    	
        register();
        startGPS();
        pm = (PowerManager) getSystemService(Context.POWER_SERVICE);   
        wakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "CPUKeepRunning");  
       try {
    	   wakeLock.acquire();
		} catch (Exception e) {
			e.printStackTrace();
		}
       
		backgroundService = Executors.newSingleThreadScheduledExecutor();
		if (PositionConfig.REPORT_INTERVAL < 5) {
			PositionConfig.REPORT_INTERVAL = 5;
		}
		backgroundService.scheduleAtFixedRate(new TimerIncreasedRunnable(), 0,
				1000 * PositionConfig.REPORT_INTERVAL, TimeUnit.MILLISECONDS);

		isStop = false;
    	return super.onStartCommand(intent, flags, startId);
    }

    @SuppressLint("NewApi") 
	private void startForegroundService(){
        Notification.Builder builder = PositionConfig.getLocationNotificationBuilder();
        if(null != builder) {
            Notification notification = new Notification();
            
            if(VERSION.SDK_INT >= 16) {
                notification = builder.build();
            }
            startForeground(NOTIFICATION_ID_APP_IS_RUNNING, notification);
        }
    }

	public class TimerIncreasedRunnable implements Runnable {
		@Override
		public void run() {
			try {
				if(isStop){
					return;
				}
				report();
			} catch (Throwable t) {
                Log.e("LocationService", t.getMessage());
            }
		}
	}
	
    @Override
    public void onCreate() {
    	super.onCreate();
    }
    
    @Override
    public void onDestroy() {
        stopGPS();
        unRegister();
        wakeLock.release();  
        
    	isStop = true;
    	if(backgroundService!=null){
    		backgroundService.shutdown();
    	}
    	
    	backgroundService = null;
    	super.onDestroy();
    }
    /***
     * 开启GPS
     */
    private void startGPS() {
    	if(!PositionConfig.isSimulateLocation()){
    		GPSEngine.getInstance().startGPSEngine(MyApplication.getApplication(), true);
    	} else {
    		ALoationProducer producer = null;
    		if (!StringUtil.isEmpty(PositionConfig.getLoationProducerClassName())) {
    			try {
    				producer = (ALoationProducer) Class
        					.forName(PositionConfig.getLoationProducerClassName()).newInstance();
        		} catch (Exception e) {
        			producer = null;
        			e.printStackTrace();
        		}
    		}
    		
    		if(null == producer){
    			GPSEngine.getInstance().startGPSEngine(MyApplication.getApplication(), true);
    		} else {
    			startSimulateLocation(producer);
    		}
    	}
    }

    /***
     * 关闭GPS
     */
    private void stopGPS() {
    	isStop = true;
        GPSEngine.getInstance().stopGPSLocate();
    }

    /**
     * 开启服务
     * @param context
     */
    public static void startInstance(Context context) {
        Intent intent = new Intent(context, PositionService.class);
        context.startService(intent);
    }

    /**
     * 关闭服务
     * @param context
     */
    public static void stopInstance(Context context) {
        Intent intent = new Intent(context, PositionService.class);
        context.stopService(intent);
    }

    /***
     * 注册监听
     */
    private void register() {
        GPSEngine.getInstance().registerLocationChangedListener(listener);
    }

    /***
     * 取消注册
     */
    private void unRegister() {
        GPSEngine.getInstance().unRegisterLocationChangedListener(listener);
    }
    
    
    private void startSimulateLocation(final ALoationProducer producer) {
    	new Thread( new Runnable() {
			@Override
			public void run() {
				for(int i = 0 ; i < producer.getNum(); i++){
					if(isStop){
						break;
					}
					
					Location location = producer.generate(i);
					if(null != location){
						listener.onLocationChanged(location);
						try {
							Thread.sleep(producer.getInterval()*1000);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				}
			}
		}).start();
    	
    }

    private ILocationChangedListener listener = new ILocationChangedListener() {

        @Override
        public void onLocationChanged(Location location) {

            if (location.getProvider().equalsIgnoreCase(LocationManager.GPS_PROVIDER)
                    || location.getProvider().equalsIgnoreCase(LocationManager.NETWORK_PROVIDER)) {
                lastLocation = location;
                if (PositionConfig.isLogLocation()) {
                    logLocation(location);
                }
                sendPositionBroadcast(EPositionMessageType.RECEIVENEWLOCATION, "");
                if (location.getAccuracy() > 200) {
                    return;
                }

                if (!isPauseReport()) {
                    if (!isLocationNeedReport(location)) {
                        //不上报精度值大于200米的坐标
                        return;
                    }

                    PositionReportTask.getInstance().addFilterLocation(location);
                }
            }
        }
        
        private boolean isLocationNeedReport(Location location) {
            if( location.getAccuracy() > 200 ) {
                //不上报精度值大于200米的坐标
                return false;
            }
            
            return true;
        }
        
		@Override
		public void onProviderDisabled(String provider) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void onProviderEnabled(String provider) {
			// TODO Auto-generated method stub
		}

		@Override
		public void onStatusChanged(String provider, int status, Bundle extras) {
			// TODO Auto-generated method stub
		}
    };
    
	private void sendPositionBroadcast(EPositionMessageType type, String msg) {
		Intent intent = new Intent(PositionConfig.ACTION_POSITION_NAME);
		intent.putExtra(PositionConfig.ACTION_POSITION_MSG_TYPE,
				type.getValue());
		intent.putExtra(PositionConfig.ACTION_POSITION_MSG_CONTENT, msg);
		MyApplication.getApplication().sendBroadcast(intent);
	}
	
    ////////////////////////////////////////////////////////////////////////
    //--------------------------------------------------------------------//
    // 轨迹记录
    String path = null;
	private static ExecutorService executor;
	private void logLocation(Location location){
    	if(null == location){
    		return;
    	}
    	
        if(null == path){
        	path = FileUtil.getInstance(null).getMediaPath()+DateUtil.getDate()+".txt";
        }
        
        StringBuilder sb = new StringBuilder();
        sb.append(location.getLongitude());
        sb.append("#");
        sb.append(location.getLatitude());
        sb.append("#");
        sb.append(DateUtil.changeLongToString(location.getTime()));
        sb.append("#");
        sb.append(location.getSpeed());
        sb.append("#");
        sb.append(location.getAccuracy());
        sb.append("#");
        sb.append(location.getProvider());
        sb.append("\n");
        log2file(path, sb.toString());
	}
	
    private static File GetFileFromPath(String path) {
        boolean ret;
        boolean isExist;
        boolean isWritable;
        File file = null;

        if (TextUtils.isEmpty(path)) {
            Log.e("Error", "The path of Log file is Null.");
            return file;
        }

        file = new File(path);

        isExist = file.exists();
        isWritable = file.canWrite();

        if (isExist) {
            if (isWritable) {
                //Log.i("Success", "The Log file exist,and can be written! -" + file.getAbsolutePath());
            } else {
                Log.e("Error", "The Log file can not be written.");
            }
        } else {
            //create the log file
            try {
                ret = file.createNewFile();
                if (ret) {
                    Log.i("Success", "The Log file was successfully created! -" + file.getAbsolutePath());
                } else {
                    Log.i("Success", "The Log file exist! -" + file.getAbsolutePath());
                }

                isWritable = file.canWrite();
                if (!isWritable) {
                    Log.e("Error", "The Log file can not be written.");
                }
            } catch (IOException e) {
                Log.e("Error", "Failed to create The Log file.");
                e.printStackTrace();
            }
        }

        return file;
    }
    
    protected static void log2file(final String path, final String str) {
        if (executor == null) {
            executor = Executors.newSingleThreadExecutor();
        }
        if (executor != null) {
            executor.execute(new Runnable() {
                @Override
                public void run() {
                    PrintWriter out = null;
                    File file = GetFileFromPath(path);
                    if (file != null) {
                        try {
                            out = new PrintWriter(new BufferedWriter(new FileWriter(file, true)));
                            out.println(str);
                            out.flush();
                        } catch (IOException e) {
                            e.printStackTrace();
                        } finally {
                            out.close();
                        }
                    }
                }
            });
        }
    }
}

